{"version":3,"file":"static/js/333.427435af.chunk.js","mappings":"4KAKiCA,E,UCJjC,G,QAAA,CAAgB,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCiBnN,EATmB,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAS,UACtC,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAGtC,ECDA,EARgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAAA,SAAW,SACtBJ,EAAMO,SAGnB,E,kDCZA,EAA8B,mCAA9B,EAAyE,6B,2BCI5DC,EAAc,SAAH,GAAU,EAALC,MAAmD,IAA7C,EAAD,EAAEC,KAAOC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAQC,EAAQ,EAARA,SAClDC,EAAWH,GAAWC,EAC5B,OACI,iBAAKT,UAAWY,EAAqB,KAAOD,EAAWC,EAAe,IAAI,WACtE,yBACKF,IAEJC,IAAY,0BAAOF,MAGhC,EAEaI,EAAW,SAAChB,GACrB,IAAOS,EAAoCT,EAApCS,MAAuBQ,GAAajB,EAA7BU,KAA6BV,EAAvBkB,OAAmB,OAAIlB,EAAK,IAChD,OACG,SAACQ,GAAW,kBAAKR,GAAK,cAClB,uCAAcS,GAAWQ,MAGpC,ELxBaE,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,mBACX,EMmDMC,GNjD2BtB,EMiDI,GNjDkB,SAACqB,GACpD,GAAIA,EAAME,OAASvB,EAAY,MAAM,iBAAN,OAAwBA,EAAS,WAEpE,GMiEMwB,GAAsBC,EAAAA,EAAAA,GAAkC,CAACC,KAAM,wBAAzCD,EAjBiD,SAACxB,GAC1E,OACI,kBAAM0B,SAAU1B,EAAM2B,aAAa,WAC/B,0BACI,SAAC,IAAK,CAACC,UAAWZ,EACXV,KAAM,iBACNuB,YAAa,qBACbC,SAAU,CAACX,EAASE,QAG/B,0BACI,yCAIhB,IAIA,EAxDgB,SAACrB,GACb,IAAI+B,EAAQ/B,EAAMgC,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAAY9B,KAAM8B,EAAE9B,KAAMJ,GAAIkC,EAAElC,IAA1BkC,EAAElC,GAA6B,IACzFmC,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAAYhC,QAASgC,EAAEhC,SAAjBgC,EAAErC,GAAyB,IAYxF,OAAKF,EAAMwC,QAIP,iBAAKrC,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAWC,EAAAA,aAAe,SAC1B6B,KAEL,iBAAK9B,UAAWC,EAAAA,SAAW,WACvB,yBAAMiC,KACN,SAACd,EAAmB,CAACG,SAbb,SAACe,GACjBzC,EAAM0C,YAAYD,EAAOE,eAC7B,WAEW,SAAC,KAAQ,CAACtC,GAAI,UAa7B,ECPA,GAFyBuC,E,QAAAA,KApBH,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBQ,OAAQT,EAAMc,KAAKL,OAE3B,IAEyB,SAACM,GACtB,MAAO,CAIHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAyBJ,GACtC,EAER,GAIyBC,CAA6CI,E","sources":["utils/validations/validators.ts","webpack://social-network-ts/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","webpack://social-network-ts/./src/components/Common/FormControls/FormsControls.module.css?fb79","components/Common/FormControls/FormsControls.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["export const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength ) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__S2zvm\",\"dialogs\":\"Dialogs_dialogs__dg2G9\",\"dialogsItems\":\"Dialogs_dialogsItems__MAHj8\",\"active\":\"Dialogs_active__P5sR0\",\"messages\":\"Dialogs_messages__SjqC-\",\"message\":\"Dialogs_message__A7hcn\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.messages}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mXkI4\",\"error\":\"FormsControls_error__a+X5m\",\"form-control\":\"FormsControls_form-control__YUU2U\",\"formSummaryError\":\"FormsControls_formSummaryError__n-EyT\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validations/validators\";\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n       <FormControl {...props}>\r\n           <textarea {...input} {...restProps}/>\r\n       </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder:any, name: any, component: any, validate: any) => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name} component={component} validate={validate}/>\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validations/validators\";\r\n\r\n//  Компонента для диалогов, затем импортируется в  App\r\n\r\ntype DialogsPropsType = {\r\n    sendMessage: (message: string) => void\r\n    // updateNewMessageBody: (body: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n    // let newMessageBody = state.newMessageBody\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage()\r\n    // }\r\n    // let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.target.value\r\n    //     props.updateNewMessageBody(body)\r\n    // }\r\n    let addNewMessage = (values: AddMessageFormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    if (!props.isAuth) {\r\n        return <Redirect to={\"/Login\"}/>\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFromRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm : React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required,maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFromRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport {sendMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStoreType} from \"../../redux/redux-store\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    // updateNewMessageBody: (body:string) => void,\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppReduxStoreType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        // updateNewMessageBody: (body:string) => {\r\n        //     dispatch(updateNewMessageBodyActionCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer"],"names":["maxLength","props","path","id","className","s","to","name","message","FormControl","input","meta","touched","error","children","hasError","styles","Textarea","restProps","child","required","value","maxLength50","length","AddMessageFromRedux","reduxForm","form","onSubmit","handleSubmit","component","placeholder","validate","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","values","sendMessage","newMessageBody","connect","auth","dispatch","sendMessageActionCreator","Dialogs"],"sourceRoot":""}