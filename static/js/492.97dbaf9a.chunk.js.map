{"version":3,"file":"static/js/492.97dbaf9a.chunk.js","mappings":"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","sources":["utils/validations/validators.ts","webpack://social-network-ts/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","webpack://social-network-ts/./src/components/Common/FormControls/FormsControls.module.css?fb79","components/Common/FormControls/FormsControls.tsx","webpack://social-network-ts/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["export const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength ) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dg2G9\",\"dialogsItems\":\"Dialogs_dialogsItems__MAHj8\",\"active\":\"Dialogs_active__P5sR0\",\"dialog\":\"Dialogs_dialog__NNbaB\",\"messages\":\"Dialogs_messages__SjqC-\",\"message\":\"Dialogs_message__A7hcn\",\"field\":\"Dialogs_field__0dUXs\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: number\r\n    imgSrc: string\r\n}\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src={props.imgSrc} alt={'avatar'}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mXkI4\",\"error\":\"FormsControls_error__a+X5m\",\"form-control\":\"FormsControls_form-control__YUU2U\",\"formSummaryError\":\"FormsControls_formSummaryError__n-EyT\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validations/validators\";\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n       <FormControl {...props}>\r\n           <textarea {...input} {...restProps}/>\r\n       </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder:any, name: any, component: any, validate: any) => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name} component={component} validate={validate}/>\r\n    </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"display\":\"Message_display__SIUqu\",\"message\":\"Message_message__Kv8ER\",\"description\":\"Message_description__jufRq\",\"angle\":\"Message_angle__ZM1Pj\",\"angleSent\":\"Message_angleSent__S1Cv3\",\"name\":\"Message_name__UqHFa\",\"text\":\"Message_text__oTU0Y\",\"time\":\"Message_time__mnSpQ\",\"nameSent\":\"Message_nameSent__ma02q\",\"textSent\":\"Message_textSent__DVNBN\",\"timeSent\":\"Message_timeSent__QOiO5\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppReduxStoreType} from \"../../../redux/redux-store\";\r\n\r\ntype MessagePropsType = {\r\n    id: number\r\n    avatar: string\r\n    name: string\r\n    message: string\r\n    time?: any\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> =\r\n    ({id, avatar, name, message, time}) => {\r\n        const authUserId = useSelector<AppReduxStoreType, number | null>(state => state.auth.userId)\r\n        const sentMessage = <div className={s.displaySent}>\r\n            <div className={s.message} style={{justifyContent: \"flex-end\"}}>\r\n                <div className={s.description} style={{borderRadius: \"26px 28px 0 26px\"}}>\r\n                    <div className={s.nameSent}>{name}</div>\r\n                    <div className={s.textSent}>{message}</div>\r\n                    <span className={s.timeSent}>{time}</span>\r\n                </div>\r\n                <div className={s.angleSent}/>\r\n                <img src={avatar} alt={\"avatar\"}/>\r\n            </div>\r\n        </div>\r\n\r\n        const acceptedMessage = <div className={s.display}>\r\n            <div className={s.message}>\r\n                <img src={avatar} alt={\"avatar\"}/>\r\n                <div className={s.angle}/>\r\n                <div className={s.description}>\r\n                    <div className={s.name}>{name}</div>\r\n                    <div className={s.text}>{message}</div>\r\n                    <span className={s.time}>{time}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        if (id === authUserId)\r\n            return sentMessage\r\n        else return acceptedMessage\r\n    }","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validations/validators\";\r\nimport {Message} from \"./Message/Message\";\r\n\r\n\r\n//  Компонента для диалогов, затем импортируется в  App\r\n\r\ntype DialogsPropsType = {\r\n    sendMessage: (message: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} imgSrc={d.imgSrc}/>)\r\n    let messagesElements = state.messages.map(m =>\r\n        <Message key={m.id}\r\n                 id={m.id}\r\n                 avatar={m.avatar}\r\n                 name={m.name}\r\n                 message={m.message}\r\n                 time={m.time}\r\n        />\r\n    )\r\n    const scroll = React.useRef(null)\r\n    let addNewMessage = (values: AddMessageFormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    if (!props.isAuth) {\r\n        return <Redirect to={\"/Login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.dialogF} >{messagesElements}\r\n                {/*<div ref={scroll}/>*/}\r\n                <div>\r\n                    <AddMessageFromRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field className={s.field} component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFromRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport {sendMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStoreType} from \"../../redux/redux-store\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    // updateNewMessageBody: (body:string) => void,\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppReduxStoreType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        // updateNewMessageBody: (body:string) => {\r\n        //     dispatch(updateNewMessageBodyActionCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer"],"names":["maxLength","props","path","id","className","s","src","imgSrc","alt","to","name","FormControl","input","meta","touched","error","children","hasError","styles","Textarea","restProps","child","required","value","Message","avatar","message","time","useSelector","state","auth","userId","style","justifyContent","borderRadius","maxLength50","length","AddMessageFromRedux","reduxForm","form","onSubmit","handleSubmit","component","placeholder","validate","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","React","isAuth","values","sendMessage","newMessageBody","connect","dispatch","sendMessageActionCreator","Dialogs"],"sourceRoot":""}