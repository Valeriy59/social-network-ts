{"version":3,"file":"static/js/630.f7179355.chunk.js","mappings":"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","sources":["webpack://social-network-ts/./src/components/Profile/Profile.module.css?b512","webpack://social-network-ts/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network-ts/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://social-network-ts/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__rAOXt\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__29CdQ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__69Yas\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\ntype ProfileStatusStateType = {\r\n    status: string\r\n    editMode: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        onChange={onChangeStatus}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import {useFormik} from \"formik\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport React from \"react\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n    onSubmit: (values: ProfileFormikType) => void\r\n}\r\nexport type ProfileFormikType = {\r\n    fullName?: string,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription?: string,\r\n    aboutMe?: string\r\n    contacts?: ContactsType\r\n\r\n}\r\nexport const ProfileDataForm = ({ profile, onSubmit }: ProfileDataFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: true,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: {...profile.contacts}\r\n\r\n        },\r\n        onSubmit: values => {\r\n            onSubmit({\r\n                fullName: values.fullName,\r\n                lookingForAJob: values.lookingForAJob,\r\n                lookingForAJobDescription: values.lookingForAJobDescription,\r\n                aboutMe: values.aboutMe,\r\n                contacts:{\r\n                    facebook:values.contacts.facebook,\r\n                    github: values.contacts.github,\r\n                    instagram: values.contacts.instagram,\r\n                    vk: values.contacts.vk,\r\n                    mainLink: values.contacts.mainLink,\r\n                    twitter: values.contacts.twitter,\r\n                    website: values.contacts.website,\r\n                    youtube: values.contacts.youtube\r\n                }\r\n            })\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <button type=\"submit\">save</button>\r\n            <div>\r\n                <b>Full name</b>:\r\n                <input\r\n                    {...formik.getFieldProps(\"fullName\")}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a\r\n                    job</b>:\r\n                <input\r\n                    type={\"checkbox\"}\r\n                    {...formik.getFieldProps(\"lookingForAJob\")}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>:\r\n                <input\r\n                    {...formik.getFieldProps(\"lookingForAJobDescription\")}/>\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                <input\r\n                    {...formik.getFieldProps(\"aboutMe\")}/>\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contacts}>\r\n                    <b>\r\n                        {key}:\r\n                        <input\r\n                            placeholder={key}\r\n                            {...formik.getFieldProps(\"contacts.\" + key)}/></b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>)\r\n}","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport userPhoto from \"../../../assets/images/img.jpg\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileDataForm, ProfileFormikType} from \"./ProfileDataForm\";\r\n\r\n// type ProfileInfoType ={\r\n//     profile: ProfileUserType\r\n//     status: string\r\n//     updateStatus: (status: string) => (dispatch: Dispatch) => void\r\n//     isOwner: boolean\r\n//     savePhoto: (photoFile: File) => (dispatch: Dispatch) => void\r\n//     // saveProfile: (profile:ProfileFormikType) => (dispatch: Dispatch) => void\r\n//     errorMessage: string\r\n// }\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const selectFileHandler = () => {\r\n        inputRef && inputRef.current?.click();\r\n    }\r\n\r\n    const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files?.length === 1) {\r\n            props.savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onSubmit = (values: ProfileFormikType) => {\r\n        props.saveProfile(values)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div className={s.profile}>\r\n                <img src={props.profile.photos?.large !== null ? props.profile.photos?.large : userPhoto}\r\n                     className={s.mainPhoto}/>\r\n                {\r\n                    props.isOwner &&\r\n                    <div>\r\n                        <button onClick={selectFileHandler}>upload file</button>\r\n                        <input style={{display: \"none\"}}\r\n                               ref={inputRef}\r\n                               type={\"file\"}\r\n                               onChange={onMainPhotoSelected}\r\n                        />\r\n                    </div>\r\n                }\r\n\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateUserStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n            <div className={s.profileInfo}>\r\n                {\r\n                    editMode\r\n                        ? <ProfileDataForm profile={props.profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData isOwner={props.isOwner} profile={props.profile}\r\n                                       goToEditMode={() => {\r\n                                           setEditMode(true)\r\n                                       }}\r\n                                       errorMessage={props.errorMessage}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    [key: string]: string | undefined;\r\n    contactTitle: string\r\n    contactValue: string | undefined\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contacts}>\r\n        <li><b>{contactTitle}</b>: {contactValue}</li>\r\n    </div>\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n    errorMessage: string\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode, errorMessage}: ProfileDataType) => {\r\n    return <div>\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob && <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key}\r\n                            contactValue={profile.contacts && profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n        {\r\n            isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n                {errorMessage && <div className={s.error}>{errorMessage}</div>}\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__EDXqV\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n//  Компонента для профиля, затем импортируется в  App\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src='https://fun-cats.ru/wp-content/uploads/4/b/2/4b28e906802cf608d7d0f2ac5a90459a.jpeg'></img>\r\n            {props.message}\r\n            <div><span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__AMT2H\",\"posts\":\"MyPosts_posts__ENZUJ\"};","import React, {memo} from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css'\r\nimport {PostObjType} from \"../../../redux/state\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validations/validators\";\r\nimport {Textarea} from \"../../Common/FormControls/FormsControls\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\n//  Компонента для профиля, затем импортируется в  App\r\n\r\n// type MyPostsPropsType = {\r\n//     posts: Array<PostObjType>\r\n//     newPostText: string\r\n//     addPost: (postText: string) => void\r\n//     // updateNewPostText: (text: string) => void\r\n// }\r\n\r\nconst MyPosts = memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.post} likesCount={p.likesCount}/>)\r\n    // создается ссылка\r\n    // let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n    //\r\n    // //это колбэк функция она отдается кнопке на событие онклик, а онклик ее вызовет\r\n    // let onAddPost = (values: AddNewPostFormDataType) => {\r\n    //         props.addPost(values.newPostText)\r\n    // }\r\n\r\n    // let onPostChange = () => {\r\n    //     if (newPostElement.current) {\r\n    //         props.updateNewPostText(newPostElement.current?.value)\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <hr/>\r\n            <h3>My posts</h3>\r\n            <hr/>\r\n            <NewPostFormik addPost={props.addPost}/>\r\n            <div className={s.posts}>New posts</div>\r\n            {postsElements}\r\n            {/*<AddNewPostFormRedux onSubmit={onAddPost}/>*/}\r\n            {/*<div className={s.posts}>*/}\r\n            {/*    {postsElements}*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n})\r\n\r\ntype NewPostFormikPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\ntype FormikErrorType = {\r\n    newPostText?: string\r\n}\r\n\r\nexport const NewPostFormik = (props: NewPostFormikPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostText: '',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.newPostText){errors.newPostText='Required'}\r\n            else if (values.newPostText.length>10){errors.newPostText=\"Max length is 10 symbols\"}\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addPost(values.newPostText)\r\n\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    className = {formik.errors.newPostText? s.error : ''}\r\n                    placeholder={'Post message'}\r\n                    {...formik.getFieldProps('newPostText')}\r\n                />\r\n                {formik.touched.newPostText && formik.errors.newPostText && <div style={{color:'red'}}>{formik.errors.newPostText}</div>}\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n// type AddNewPostFormDataType = {\r\n//     newPostText: string\r\n// }\r\n//\r\n// const maxLength10 = maxLengthCreator(10)\r\n//\r\n// const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n//     return(\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field name={'newPostText'} component={Textarea} validate={[required, maxLength10]}/>\r\n//             </div>\r\n//             <div>\r\n//                 <button>Add post</button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n//\r\n// const AddNewPostFormRedux = reduxForm<AddNewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostObjType} from \"../../../redux/state\";\r\nimport {AppReduxStoreType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n//  Контейнерная компонента для работы со стором\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostObjType>,\r\n    newPostText: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (postText: string) => void,\r\n    // updateNewPostText: (newText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\nlet mapStateToProps = (state: AppReduxStoreType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (postText: string) => {\r\n            dispatch(addPostActionCreator(postText))\r\n        },\r\n        // updateNewPostText: () => (newText: string) => {\r\n        //     dispatch(updateNewPostTextActionCreator(newText))\r\n        // }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n// import {ProfilePropsType} from \"./ProfileContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileFormikType} from \"./ProfileInfo/ProfileDataForm\";\r\n//  Компонента для профиля, затем импортируется в  App\r\n// функциональная компонента, должна принимать в себя данные извне. чистая функция\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => (dispatch: Dispatch) => void\r\n    isOwner: boolean\r\n    savePhoto: (file:File) => (dispatch: Dispatch) => void\r\n    saveProfile: (profile:ProfileFormikType) => (dispatch: Dispatch) => void\r\n    errorMessage: string\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n                errorMessage={props.errorMessage}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {AppReduxStoreType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {ProfileFormikType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType,\r\n    status: string\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean\r\n    isOwner: boolean\r\n    errorMessage: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void,\r\n    getStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => (dispatch: Dispatch) => void,\r\n    savePhoto: (photoFile: File) => (dispatch: Dispatch) => void,\r\n    saveProfile: (profile: ProfileFormikType) => (dispatch: Dispatch) => void\r\n\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType>{\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId !== null ? this.props.authorizedUserId.toString() : userId\r\n            if (!userId) {\r\n                this.props.history.push(\"/Login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    // после вмонтирования компонента, отправить запрос на сервер\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n                     errorMessage={this.props.errorMessage}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppReduxStoreType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    isOwner: state.profilePage.isOwner,\r\n    errorMessage: state.profilePage.profileErrorMessage\r\n})\r\n\r\nexport default compose<React.FC>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        // saveProfile\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatus","value","onChange","e","currentTarget","ProfileDataForm","profile","onSubmit","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","values","facebook","github","instagram","vk","mainLink","twitter","website","youtube","handleSubmit","type","getFieldProps","Object","keys","map","key","className","s","placeholder","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","errorMessage","onClick","inputRef","useRef","Preloader","src","photos","large","userPhoto","current","click","style","display","ref","event","target","files","length","savePhoto","updateStatus","saveProfile","classes","message","likesCount","MyPosts","memo","postsElements","posts","p","post","id","NewPostFormik","addPost","newPostText","validate","errors","touched","color","connect","state","profilePage","dispatch","postText","addPostActionCreator","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","isAuth","profileErrorMessage","withRouter"],"sourceRoot":""}